#Parts 1 and 3 of final exam, Kamenetskiy
#To make this file I used the "touch" command

#Question 1
nano stuff.txt
#or 
view stuff.txt
#or 
less stuff.txt #This one if for purely view options, the others you can edit from

#Question 2
wc -l foo.txt

#Question 3
grep "Hirundo" Birds.txt > Hirundo.txt
grep -i "Hirundo" Birds.txt > Hirundo.txt #This is for case insenitive finds! 

#Question 4
grep "Hirundo" Birds.txt | wc -l #This is using a pipe 
#You can also use grep itself: 
grep -c "Hirundo" Birds.txt

#Part 2!!

#Question 5
#Version control is a system that essentially keeps track of the history of the versions of a file. It allows for your working directory and what you "see" in your directories to be much cleaner since you do not have to have every revised version of your documents in your directory. It acts a lot like google docs in my mind. You continuously make edits to a document, but you only work with the most revised version when you open it up again. However, google docs saves the documents and all revisions done to it. 

#Question 6
#Git is a software that can act as a command line tool! When initialized, git creates a "repository" in which it creates a directory with the name .git that is usually hidden from the user's view. The repository stores your revisions once you add, commit and push to it! 

#Question 7
#Git is a software for storing your revisions in a hidden from view repository, however, git hub is an online platform in which you can push your git repository to so that it is accessible online. Since it is accessible online, that means that other people can also see your work, or you can collaborate with others on one single repository. 

#Question 8
#The series of commands for those with git and github will use the following lines in order to add a version of a file to github. 
#git add Something.txt
#git commit -m "Message Here"
#git push -u origin master #-u allows you to git pull as well so that you now have updates!


#Question 9
#To know the differences between the most recent commit and that of a file two commits ago you would do the below: 
git diff HEAD~2 bar.txt
#You can always use the commit_hash of the file retrieved through the git log command. 




